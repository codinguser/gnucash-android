import java.text.SimpleDateFormat
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

def versionMajor = 2
def versionMinor = 1
def versionPatch = 0
def versionBuild = 0

def buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd HH:mm 'UTC'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}


android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'
    defaultConfig {
        applicationId "org.gnucash.android"
        testApplicationId 'org.gnucash.android.test'
        minSdkVersion 10
        targetSdkVersion 23
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        resValue "string", "app_version_name", "${versionName}"
        resValue "string", "app_minor_version", "${versionMinor}"
        buildConfigField "boolean", "CAN_REQUEST_RATING", "false"
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""

        if (project.hasProperty("RELEASE_DROPBOX_APP_KEY")){
            resValue "string", "dropbox_app_key", RELEASE_DROPBOX_APP_KEY
            resValue "string", "dropbox_app_secret", RELEASE_DROPBOX_APP_SECRET
            resValue "string", "manifest_dropbox_app_key", "db-${RELEASE_DROPBOX_APP_KEY}"
        } else {
            resValue "string", "dropbox_app_key", "dhjh8ke9wf05948"
            resValue "string", "dropbox_app_secret", "h2t9fphj3nr4wkw"
            resValue "string", "manifest_dropbox_app_key", "db-dhjh8ke9wf05948"
        }
        testInstrumentationRunner "org.gnucash.android.test.ui.util.GnucashAndroidTestRunner"

    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent, "GnucashAndroid_v${variant.versionName}.apk")
        }
    }

    signingConfigs {
        debug {
            storeFile file("../debug.keystore")
        }

        if(project.hasProperty("RELEASE_STORE_FILE")) {
            release {
                storeFile       file(RELEASE_STORE_FILE)
                storePassword   RELEASE_STORE_PASSWORD
                keyAlias        RELEASE_KEY_ALIAS
                keyPassword     RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        //todo re-enable proguard and test coverage
        release {
//            minifyEnabled true
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")){
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
        debug {
            debuggable true
//            testCoverageEnabled true
            signingConfig signingConfigs.debug
        }
    }
    lintOptions {
        abortOnError false
    }

    productFlavors {
        development {
            applicationId 'org.gnucash.android.devel'
            testApplicationId 'org.gnucash.android.devel.test'
            resValue "string", "app_name", "GnuCash-devel"
            versionName "${versionMajor}.${versionMinor}.${versionPatch}-dev${versionBuild}_r${gitSha()}"
            resValue "string", "app_version_name", "${versionName}"
        }

        beta {
            resValue "string", "app_name", "GnuCash - beta"
            versionName "${versionMajor}.${versionMinor}.${versionPatch}-beta${versionBuild}"
            resValue "string", "app_version_name", "${versionName}"
        }

        production {
            resValue "string", "app_name", "GnuCash"
            buildConfigField "boolean", "CAN_REQUEST_RATING", "true"
        }

    }


    compileOptions { //we want switch with strings during xml parsing
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

/**
 * Create the Crashlytics properties file when building on CI
 * @return
 */
def initCrashlyticsPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) { //the keys added here are invalid, just placeholders to make builds pass
            entry(key: "apiSecret", value: "bd4e83a9a4c35fbf1fbe8d9ccce9443eebb9d5835605f9d06767850e0f1e5b22")
            entry(key: "apiKey", value: "46fe045d00d4ad8a71014c53567be3368e10bd64")
        }
    }
}

def adb = Os.isFamily(Os.FAMILY_WINDOWS) ? "..\\scripts\\adb_all.bat" : "../scripts/adb_all.sh"
//def adb = android.getAdbExe().toString()

afterEvaluate {
    initCrashlyticsPropertiesIfNeeded()

    task grantTestPermissionsDevel(type: Exec, dependsOn: 'installDevelopmentDebug') { // or install{productFlavour}{buildType}
        if (Os.isFamily(Os.FAMILY_WINDOWS)){
            commandLine "cmd", "/c", "$adb", "shell pm grant $android.productFlavors.development.applicationId android.permission.SET_ANIMATION_SCALE"
//            commandLine "cmd", "/c", "$adb", "shell pm grant $android.productFlavors.development.applicationId android.permission.WRITE_EXTERNAL_STORAGE"
        } else {
            commandLine "$adb shell pm grant $android.productFlavors.development.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
//            commandLine "$adb shell pm grant $android.productFlavors.development.applicationId android.permission.WRITE_EXTERNAL_STORAGE".split(' ')
        }
    }

    task grantTestPermissionsProduction(type: Exec, dependsOn: 'installProductionDebug'){
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine "cmd", "/c", "$adb", "shell pm grant $android.productFlavors.development.applicationId android.permission.SET_ANIMATION_SCALE"
            commandLine "cmd", "/c", "$adb", "shell pm grant $android.productFlavors.development.applicationId android.permission.WRITE_EXTERNAL_STORAGE"
        } else {
            commandLine "$adb shell pm grant $android.defaultConfig.applicationId android.permission.SET_ANIMATION_SCALE".split(' ')
            commandLine "$adb shell pm grant $android.defaultConfig.applicationId android.permission.WRITE_EXTERNAL_STORAGE".split(' ')
        }
    }

    // When launching individual tests from Android Studio, it seems that only the assemble tasks
    // get called directly, not the install* versions
    tasks.each { task ->
        if (task.name.startsWith('assembleDevelopmentDebugAndroidTest')){
            task.dependsOn grantTestPermissionsDevel
        } else if (task.name.startsWith('assembleBetaDebugAndroidTest')){
            task.dependsOn grantTestPermissionsProduction
        } else if (task.name.startsWith('assembleProductionDebugAndroidTest')){
            task.dependsOn grantTestPermissionsProduction
        }
    }
}

def androidSupportVersion       = "23.3.0"
def androidEspressoVersion      = "2.2.2"
def androidSupportTestVersion   = "0.5"

repositories{
    flatDir{
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile(name:'owncloud_library', ext:'aar')
    compile('com.android.support:support-v4:'       + androidSupportVersion,
            'com.android.support:appcompat-v7:'     + androidSupportVersion,
            'com.android.support:design:'           + androidSupportVersion,
            'com.android.support:cardview-v7:'      + androidSupportVersion,
            'com.android.support:preference-v7:'    + androidSupportVersion,
            'com.android.support:recyclerview-v7:'  + androidSupportVersion,
            'com.viewpagerindicator:library:2.4.1@aar',
            'com.code-troopers.betterpickers:library:2.5.5',
            'org.jraf:android-switch-backport:2.0.1@aar',
            'com.github.PhilJay:MPAndroidChart:v2.1.3',
            'joda-time:joda-time:2.7',
            'com.google.android.gms:play-services-drive:8.3.0',
            'com.jakewharton:butterknife:7.0.1',
            'io.github.kobakei:ratethisapp:1.0.3',
            'com.squareup:android-times-square:1.6.5@aar',
            'com.github.techfreak:wizardpager:1.0.3',
            'net.objecthunter:exp4j:0.4.5',
            'org.apache.jackrabbit:jackrabbit-webdav:2.11.1'
    )

    compile ('com.uservoice:uservoice-android-sdk:1.2.+') {
        exclude module: 'commons-logging'
        exclude module: 'httpcore'
        exclude module: 'httpclient'
    }

    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }

    compile 'com.facebook.stetho:stetho:1.3.1'

    testCompile('org.robolectric:robolectric:3.1',
            'junit:junit:4.12',
            'joda-time:joda-time:2.7',
            'org.assertj:assertj-core:1.7.1'
    )
    androidTestCompile ('com.android.support:support-annotations:'  + androidSupportVersion,
                        'com.android.support.test:runner:'          + androidSupportTestVersion,
                        'com.android.support.test:rules:'           + androidSupportTestVersion,
                        'com.android.support.test.espresso:espresso-core:'      + androidEspressoVersion,
                        'com.android.support.test.espresso:espresso-intents:'   + androidEspressoVersion,
            //the following are only added so that the app and test version both us the same versions
                        'com.android.support:appcompat-v7:'     + androidSupportVersion,
                        'com.android.support:design:'           + androidSupportVersion)
    androidTestCompile ('com.android.support.test.espresso:espresso-contrib:'   + androidEspressoVersion) {
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    androidTestCompile('com.squareup.assertj:assertj-android:1.1.1'){
        exclude group: 'com.android.support', module:'support-annotations'
    }
}
